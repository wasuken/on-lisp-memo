(defun move-objs (objs dx dy)
  (multiple-value-bind (x0 y0 x1 y1) (bounds objs)
	(dolist (o objs)
	  (incf (obj-x o) dx)
	  (incf (obj-y o) dy))
	(multiple-value-bind (xa ya xb yb) (bounds objs)
	  (redraw (min x0 xa) (min y0 ya)
			  (max x1 yb) (max y1 yb)))))

(defun scale-objs (factor)
  (multiple-value-bind (x0 y0 x1 y1) (bounds objs)
	(dolist (o objs)
	  (setf (obj-dx o) (* (obj-dx o) factor)
			(obj-dy o) (* (obj-dy o) factor)))
	(multiple-value-bind (xa ya xb yb) (bounds objs)
	  (redraw (min x0 xa) (min y0 ya)
			  (max x1 yb) (max y1 yb)))))

(defmacro with-redraw ((var -objs) &body body)
  (let ((gob (gensym))
		(x0 (gensym)) (y0 (gensym))
		(x1 (gensym)) (y1 (gensym)))
	'(let ((,gob ,objs))
	  (multiple-value-bind (,x1 ,y0 ,x1 ,y1)
		  (dolist (,var ,gob) ,@body)
		(multiple-value-bind (xa ya xb yb) (bounds ,gob)
		  (redraw (min ,x0 xa) (min ,y0 ya)
				  (max ,x1 yb) (max ,y1 yb)))))))

(defun move-objs (objs dx dy)
  (with-redraw (o objs)
	(incf (obj-x o) dx)
	(incf (obj-y o) dy)))

(defun scale-objs (objs factor)
  (with-redraw (o objs)
	(setf (objs-dx o) (* (objs-dx o) factor)
		  (objs-dy o) (* (objs-dy o) factor))))
